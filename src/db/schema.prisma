generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bid {
  id              Int         @id @default(autoincrement())
  contractorId    Int         @map("contractor_id")
  tenderId        Int         @map("tender_id")
  status          String
  submissionDate  DateTime    @map("submission_date")
  lastUpdatedDate DateTime    @updatedAt @map("last_updated")
  contractor      Contractor? @relation(fields: [contractorId], references: [id])
  tender          Tender?     @relation(fields: [tenderId], references: [id])

  @@index([contractorId], name: "idx_bid_contractorId")
  @@map("bid")
}

model Tender {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  items           Item[]
  files           File[]
  recipients      Recipients[]
  bids            Bid[]
  status          String
  submissionDate  DateTime       @map("submission_date")
  lastUpdatedDate DateTime       @updatedAt @map("last_updated")
  BidPlacement    BidPlacement[]

  @@map("tender")
}

model Item {
  id       Int     @id @default(autoincrement())
  name     String
  quantity Int
  unit     String?
  cost     String?
  tenderId Int     @map("tender_id")
  tender   Tender? @relation(fields: [tenderId], references: [id])

  @@map("item")
}

model File {
  id             Int           @id @default(autoincrement())
  name           String
  size           Int
  path           String
  tenderId       Int?          @map("tender_id")
  tender         Tender?       @relation(fields: [tenderId], references: [id])
  // Relation back to BidPlacement
  bidPlacementId Int?          @map("bid_placement_id")
  bidPlacement   BidPlacement? @relation(fields: [bidPlacementId], references: [id], name: "BidPlacementFiles")

  @@map("file")
}

model Contractor {
  id                 Int            @id @default(autoincrement())
  companyName        String?        @map("company_name")
  email              String?        @unique
  homePhone          String?        @map("home_phone")
  businessPhone      String?        @map("business_phone")
  address             String?       
  falconRegistration Boolean        @default(false) @map("falcon_registration")
  userId             Int?
  user               User?          @relation(fields: [userId], references: [id])
  Bid                Bid[]
  recipient          Recipients[]
  BidPlacement       BidPlacement[]

  @@unique([userId], name: "user_id")
  @@map("contractor")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  role       String?     @default("user")
  verified   Boolean     @default(false)
  Contractor Contractor?
  fxBidder   Fxbidder?

  @@map("user")
}

model Recipients {
  id           Int         @id @default(autoincrement())
  contractorId Int?        @map("contractor_id")
  contractor   Contractor? @relation(fields: [contractorId], references: [id])
  tenderId     Int?        @map("tender_id")
  tender       Tender?     @relation(fields: [tenderId], references: [id])

  @@map("recipients")
}

model Settings {
  id      Int    @id
  appName String? @map("app_name")
  appUrl  String? @map("app_url")
  appLogo String? @map("app_logo")
  smtpHost String? @map("smtp_host")
  smtpUser String? @map("smtp_user")
  smtpPassword String? @map("smtp_password")
  smtpPort String? @map("smtp_port")

  @@map("settings")
}

model Fxbidder {
  id            Int     @id @default(autoincrement())
  firstName     String? @map("first_name")
  lastName      String? @map("last_name")
  email         String? @unique
  businessPhone String? @map("business_phone")

  userId         Int?
  user           User?            @relation(fields: [userId], references: [id])
  FxRecipients   FxRecipients[]
  FxBid          FxBid[]
  FxBidPlacement FxBidPlacement[]

  @@unique([userId], name: "user_id")
  @@map("fx_bidder")
}

model Fx {
  id              Int      @id @default(autoincrement())
  title           String
  currency        String
  amount          String
  startTime       DateTime @map("start_time")
  endTime         DateTime @map("end_time")
  note            String
  status          String
  submissionDate  DateTime @map("submission_date")
  lastUpdatedDate DateTime @updatedAt @map("last_updated")

  FxRecipients FxRecipients[]
  FxBid        FxBid[]

  @@map("fx")
}

model FxRecipients {
  id         Int       @id @default(autoincrement())
  fxBidderId Int?      @map("fx_bidder_id")
  fxBidder   Fxbidder? @relation(fields: [fxBidderId], references: [id])
  fxId       Int?      @map("fx_id")
  fx         Fx?       @relation(fields: [fxId], references: [id])

  @@map("fx-recipients")
}

model BidPlacement {
  id               Int      @id @default(autoincrement())
  documentPassword String?   @map("document_password")
  status           String   @default("placed")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  contractorId Int        @map("contractor_id")
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  tenderId     Int        @map("tender_id")
  tender       Tender     @relation(fields: [tenderId], references: [id])
  files        File[]     @relation("BidPlacementFiles")

  @@map("bid_placements")
}

model FxBid {
  id        Int      @id @default(autoincrement())
  fxId      Int      @map("fx_id")
  bidderId  Int      @map("bidder_id")
  amount    String
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  fx             Fx               @relation(fields: [fxId], references: [id])
  bidder         Fxbidder         @relation(fields: [bidderId], references: [id])
  FxBidPlacement FxBidPlacement[]

  @@map("fx_bid")
}

model FxBidPlacement {
  id        Int      @id @default(autoincrement())
  status    String   @default("placed")
  amount    String
  fxBidId   Int      @map("fx_bid_id")
  bidderId  Int      @map("bidder_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // Relationships
  fxBid     FxBid    @relation(fields: [fxBidId], references: [id])
  bidder    Fxbidder @relation(fields: [bidderId], references: [id])

  @@map("fx_bid_placement")
}
